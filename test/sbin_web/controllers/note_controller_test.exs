defmodule SbinWeb.NoteControllerTest do
  use SbinWeb.ConnCase

  alias Sbin.Notes
  alias Sbin.Notes.Note

  @create_attrs %{
    content: "some content",
    expire: "2030-04-17T14:00:00Z",
    title: "some title",
    syntax: "some syntax",
    salt: "some salt",
    shortcode: "some shortcode"
  }
  @update_attrs %{
    content: "some updated content",
    expire: "2031-05-18T15:01:01Z",
    title: "some updated title",
    syntax: "some updated syntax",
    salt: "some updated salt",
    shortcode: "some updated shortcode"
  }
  @invalid_attrs %{content: nil, expire: nil, title: nil}

  def fixture(:note) do
    {:ok, note} = Notes.create_note(@create_attrs)
    note
  end

  setup %{conn: conn} do
    {:ok, conn: put_req_header(conn, "accept", "application/json")}
  end

  describe "index" do
    test "lists all notes", %{conn: conn} do
      conn = get(conn, Routes.note_path(conn, :index))
      assert json_response(conn, 200)["data"] == []
    end
  end

  describe "create note" do
    test "renders note when data is valid", %{conn: conn} do
      conn = post(conn, Routes.note_path(conn, :create), note: @create_attrs)
      assert %{"id" => id, "shortcode" => shortcode} = json_response(conn, 201)["data"]

      # Old style: Use ID
      # conn = get(conn, Routes.note_path(conn, :show, id))
      # New Stle: Show by shortcode
      conn = get(conn, Routes.note_path(conn, :show, shortcode))

      ## Note: The controller hardcodes the expire date to today
      ## plus one month, so let's not test for it right now.
      original_expire =
        assert %{
                 "id" => id,
                 "content" => "some content",
                 # "expire" => "2030-04-17T14:00:00Z",
                 "title" => "some title",
                 "syntax" => "some syntax",
                 "salt" => "some salt"
                 # Shortcode is autogenerated
                 # "shortcode" => "some shortcode"
               } = json_response(conn, 200)["data"]
    end

    test "renders errors when data is invalid", %{conn: conn} do
      conn = post(conn, Routes.note_path(conn, :create), note: @invalid_attrs)
      assert json_response(conn, 422)["errors"] != %{}
    end
  end

  describe "update note" do
    setup [:create_note]

    test "renders note when data is valid", %{
      conn: conn,
      note: %Note{id: id} = note
    } do
      conn = put(conn, Routes.note_path(conn, :update, note), note: @update_attrs)
      assert %{"id" => ^id, "shortcode" => shortcode} = json_response(conn, 200)["data"]

      conn = get(conn, Routes.note_path(conn, :show, shortcode))

      assert %{
               "id" => id,
               "content" => "some updated content",
               "expire" => "2031-05-18T15:01:01Z",
               "title" => "some updated title",
               "syntax" => "some updated syntax",
               "salt" => "some updated salt",
               "shortcode" => "some updated shortcode"
             } = json_response(conn, 200)["data"]
    end

    test "renders errors when data is invalid", %{conn: conn, note: note} do
      conn = put(conn, Routes.note_path(conn, :update, note), note: @invalid_attrs)
      assert json_response(conn, 422)["errors"] != %{}
    end
  end

  describe "delete note" do
    setup [:create_note]

    test "deletes chosen note", %{conn: conn, note: note} do
      conn = delete(conn, Routes.note_path(conn, :delete, note))
      assert response(conn, 204)

      assert_error_sent 404, fn ->
        get(conn, Routes.note_path(conn, :show, note))
      end
    end
  end

  defp create_note(_) do
    note = fixture(:note)
    {:ok, note: note}
  end
end
